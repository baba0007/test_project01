#!/usr/bin/env python3# The 3 important terms of OOPs:#1- Class#2- Object# 3- Reference variable# Class is a blueprint/template/plan/design for Objects# Object is a physical existance of a class , and also an instance of a class# For one class we can constructe multiple Objects ==> one-to-many#------------------------------# example1:# class: Soney model 65 is the class# 1- want to buy sony kd 65 model tv = class# Object: each TV is an Object each one# shop1: 3200 euro = Object# shop2: 3000 euro = Object# shop3: 2800 euro = Object# amazon: 2200 euro = Object#-------------------------------# bases on the same class we can create a multiple Objects#---------------------------# Reference variable: in this example is the Remote controle of the TV that we can use the TV#-the remote controle of the TV is reference variable that we can use the TV and access it.#- to access data of the Objects.#- per each Objects we can use many Reference Variable#- without the Reference Variable the Objects are useless# -------------------------------------# how to define class:# syntax:# class classname:# Documentation string which is optionel# variable == > are properties / attributes for every objects# methods == > are actions / behaviours which are required for every objects# -----------------------------------# Ex:class Student:    '''This is a class for Demonstration purpuse '''    # variables    # methodes    # to access docstring of any class:# print(Student.__doc__)# or# help(Student)# in python class 3 sort of variables are allowed:# Variables:# 1- instance variables (also called object level variables)# 2- static variables (also called class level variables)# 3- local variables (also called method level variables)# in python class 3 sort of methods are allowed:# 1- instance methods# 2- class methods# 3- static methods# Ex2:# class creation:#print('Ex2: ')# print()class Student:    # hier you can use docstring between ''' ''' #    # 2 methods:    def __init__(self):        # 3 variables:        self.name = 'Musta'        self.rollno = 101        self.marks = 90    def talk(self):        print(f'Hello I am {self.name}.')        print(f'My Rollnumber is {self.rollno}.')        print(f'My Marks is {self.marks}')# syntax to create an object for this class:# referencevariable = classname()# s = Student() is the Object of the class Student().# print class docstring:# print(Student.__doc__)# accessing variables:s = Student()# accessing method:print(s.name)print(s.rollno)print(s.marks)print()s.talk()# --------------------# Ex3:print('-' * 10)print('Ex3: ')print()class Student:    def __init__(self, name, rollno, marks):        self.name = name        self.rollno = rollno        self.marks = marks    def talk(self):        print(f'Hello I\'am {self.name}.')        print(f'My Rollnumber is {self.rollno}')        print(f'My Marks is {self.marks}')s1 = Student('baba', 120, 89)s2 = Student('dialo', 125, 95)s1.talk()print()s2.talk()# The complete Postmortem of self variable part1:# self = reference variable which is always pointing to current object.# self is used to declare instance variable and access the values of the instance variables# self variable:# Ex1:print()class test1:    def __init__(self):  # constructor        print(f'Address of object pointed by self is {id(self)}')t = test1()print(f'Address of object pointed by t is {id(t)}')print()print('Ex2: ')print()# Ex2:class test2():    def __init__(self):        print('Constructor')    def m1(self, x):        print('x value is: ', x)t = test2()t.m1(10)print()# Ex3:print('-' * 10)print('EX4: ')print()class Student1:    def __init__(self, name, rollno, marks):        self.name = name        self.rollno = rollno        self.marks = marks    def talk1(self):        print('My name is {}'.format(self.name))        print('My Rollnumber is {} '.format(self.rollno))        print('My marks are {} '.format(self.marks))s1 = Student1('Amina', 200, 87)s1.talk1()# The complete Postmortem of self variable part2:print('-' * 10)print('Ex5: ')print()# self is not a keywords so you can use any name word like delf, kelf or any name instead but not recommended beter use self instead# self cannot be used outside of the class# The main purpose of self variable is to declare instance variables and,# to access the values of instance variables.class Student5:    def __init__(delf, name, rollno, marks):        delf.name = name        delf.rollno = rollno        delf.marks = marks    def talk5(kelf):        print('Hello my name is', kelf.name)        print('My Rollno is ', kelf.rollno)        print('My Marks are ', kelf.marks)s5 = Student5('zaza', 45, 8)s5.talk5()# -----------------------------